scalar Date
scalar DateTime
interface User {
  id: ID!
  name: String!
}

enum UserRole {
  ADMIN
  STAFF
  TREASURER
  MENTER
  MEMBER
  TRIAL
}

"""
支払い状況
"""
enum PaymentStatus {
  NOT_PAID
  PAID
}

enum RankKind {
  BEGINNER
  EVANGELIST
  MASTER
  IMPERATOR
}

type RegularUser implements User {
  id: ID!
  name: String!
  email: String!
  """
  段位
  """
  currentRank: RankKind!
  """
  支払い状況
  """
  paymentStatus: PaymentStatus!
  """
  役割
  """
  roles: [UserRole!]!
  """
  メンターのID
  """
  menterId: String
  """
  メンター
  """
  menter: RegularUser
  """
  メンティーのリスト
  """
  mentee: [RegularUser!]!
}
"""
お知らせ
"""
type News {
  id: ID!
  title: String!
  body: String!
}

"""
日々の活動やイベントの情報
"""
type Event {
  id: ID!
  start: DateTime!
  end: DateTime!
  location: String!
  title: String!
}

type StudyLog {
  id: ID!
  user: User!
  """
  作成日時
  """
  createdAt: DateTime!
  """
  更新日時
  """
  updatedAt: DateTime!
  """
  学習時間（分）
  """
  studyTime: Int!
  """
  本日の学習内容
  """
  studyContent: String!
  """
  学習日
  """
  studiedAt: Date!
}

type Query {
  getUser(id: ID!): RegularUser!
  getRegularUsers: [RegularUser!]!
  getNews: [News!]!
  getStudyLog(userId: ID!): [StudyLog!]!
  getEvents: [Event!]!
  ok: Boolean!
}

input SubmitTrialApplicationInput {
  name: String!
  email: String!
  affiliation: String!
}

input CreateStudyLogInput {
  studyTime: Int!
  studyContent: String!
  studiedAt: Date!
}

input CreateUserInput {
  name: String!
  email: String!
}

input createEventInput {
  start: DateTime!
  end: DateTime!
  location: String!
  title: String!
}
input createRepeatEventInput {
  start: DateTime!
  end: DateTime!
  location: String!
  title: String!
  repeatFrom: DateTime!
  repeatUntil: DateTime!
}
type Mutation {
  updateUserPaymentStatus(
    userId: ID!
    paymentStatus: PaymentStatus!
  ): RegularUser!
  updateUserRank(userId: ID!, rank: RankKind!): RegularUser!
  submitTrialApplication(input: SubmitTrialApplicationInput!): Boolean!
  addMenter(userId: ID!, menterId: ID!): RegularUser!
  removeMenter(userId: ID!): RegularUser!
  createStudyLog(input: CreateStudyLogInput!): StudyLog!
  createUser(input: CreateUserInput!): RegularUser!
  createRepeatEvent(input: createRepeatEventInput!): [Event!]!
  createEvent(input: createEventInput!): Event!
}
