interface User {
  id: ID!
  name: String!
}

enum UserRole {
  ADMIN
  STAFF
  TREASURER
  MENTER
}

enum DegreeKind {
  STATISTICS
  DATASCIENCE
  ENGINEER
}

"""
支払い状況
"""
enum PaymentStatus {
  NOT_PAID
  PAID
}

enum RankKind {
  BEGINNER
  EVANGELIST
  MASTER
  IMPERATOR
}

type RegularUser implements User {
  id: ID!
  name: String!
  """
  段位
  """
  currentRank: UserRank!
  """
  称号一覧
  """
  degrees(rank: RankKind, kind: DegreeKind, isCompleted: Boolean): [UserDegree]!
  """
  支払い状況
  """
  paymentStatus: PaymentStatus!
  """
  役割
  """
  roles: [UserRole!]!
}
"""
お知らせ
"""
type News {
  id: ID!
  title: String!
  body: String!
}

"""
"""
type UserRank {
  id: ID!
  userId: ID!
  rankKind: RankKind!
  completedAt: DateTime
}
type UserDegree {
  id: ID!
  userId: ID!
  degreeId: ID!
  degree: Degree!
  completedAt: String
}
type Degree {
  id: ID!
  rankKind: RankKind!
  kind: DegreeKind!
  """
  ひとつ下の称号
  """
  previousDegree: Degree
  """
  ひとつ上の称号
  """
  nextDegree: Degree
}

type DateTime {
  iso: String!
}

type StudyLog {
  id: ID!
  user: User!
  """
  作成日時
  """
  createdAt: DateTime!
  """
  更新日時
  """
  updatedAt: DateTime!
  """
  学習時間（分）
  """
  studyTime: Int!
  """
  本日の学習内容
  """
  studyContent: String!
  """
  学習日
  """
  studiedAt: DateTime!
}

type Query {
  ok: Boolean!
  getUser(id: ID!): User
  getRegularUsers: [RegularUser!]!
  getNews: [News!]!
  getStudyLog(userId: ID!): [StudyLog!]!
}

input SubmitTrialApplicationInput {
  name: String!
  email: String!
  affiliation: String!
}

input CreateStudyLogInput {
  studyTime: Int!
  studyContent: String!
  studiedAt: Int!
}

type Mutation {
  updateUserPaymentStatus(
    userId: ID!
    paymentStatus: PaymentStatus!
  ): RegularUser!
  updateUserRank(userId: ID!, rank: RankKind!): RegularUser!
  submitTrialApplication(input: SubmitTrialApplicationInput!): Boolean!
  createStudyLog(input: CreateStudyLogInput!): StudyLog!
}
